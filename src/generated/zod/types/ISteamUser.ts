// THIS FILE IS AUTO-GENERATED FOR ZOD. DO NOT EDIT.

// Generated by ts-to-zod
import { z } from "zod";

/*** The shape of a player object from the ISteamUser/GetPlayerSummaries/v2 endpoint.
 * @see https://partner.steamgames.com/doc/webapi/ISteamUser#GetPlayerSummaries
 * @description Represents a player's summary information.
 */
export const playerSummarySchema = z.object({
	/**
	 * @pattern ^[0-9]{17}$
	 * @description The player's 64-bit SteamID.
	 */
	steamid: z
		.string()
		.regex(/^[0-9]{17}$/)
		.describe("The player's 64-bit SteamID."),
	/**
	 * @minimum 0
	 * @maximum 5
	 * @description Player's community visibility state (0 = Private, 1 = Friends Only, 2 = Friends of Friends, 3 = Users Only, 4 = Public, 5 = All).
	 */
	communityvisibilitystate: z
		.number()
		.min(0)
		.max(5)
		.describe(
			"Player's community visibility state (0 = Private, 1 = Friends Only, 2 = Friends of Friends, 3 = Users Only, 4 = Public, 5 = All)."
		),
	/**
	 * @minimum 0
	 * @maximum 1
	 * @description If the profile is not visible, this will be 0. If the profile is visible, this will be 1.
	 */
	profilestate: z
		.number()
		.min(0)
		.max(1)
		.optional()
		.describe(
			"If the profile is not visible, this will be 0. If the profile is visible, this will be 1."
		),
	/**
	 * @minLength 1
	 * @maxLength 32
	 * @description The player's persona name (display name).
	 */
	personaname: z
		.string()
		.min(1)
		.max(32)
		.describe("The player's persona name (display name)."),
	/**
	 * @format unix-timestamp
	 * @description The last time the player was logged off Steam.
	 */
	lastlogoff: z
		.number()
		.describe("The last time the player was logged off Steam."),
	/**
	 * @format url
	 * @description The URL to the player's Steam Community profile.
	 */
	profileurl: z
		.string()
		.url()
		.describe("The URL to the player's Steam Community profile."),
	/**
	 * @format url
	 * @description The URL to the player's 32x32px avatar.
	 */
	avatar: z.string().url().describe("The URL to the player's 32x32px avatar."),
	/**
	 * @format url
	 * @description The URL to the player's 64x64px avatar.
	 */
	avatarmedium: z
		.string()
		.url()
		.describe("The URL to the player's 64x64px avatar."),
	/**
	 * @format url
	 * @description The URL to the player's 184x184px avatar.
	 */
	avatarfull: z
		.string()
		.url()
		.describe("The URL to the player's 184x184px avatar."),
	/**
	 * @minimum 0
	 * @maximum 6
	 * @description The player's current online status (0 = Offline, 1 = Online, 2 = Busy, 3 = Away, 4 = Snooze, 5 = Looking to Trade, 6 = Looking to Play).
	 */
	personastate: z
		.number()
		.min(0)
		.max(6)
		.describe(
			"The player's current online status (0 = Offline, 1 = Online, 2 = Busy, 3 = Away, 4 = Snooze, 5 = Looking to Trade, 6 = Looking to Play)."
		),
	/**
	 * @pattern ^[0-9]{17}$
	 * @description The 64-bit ID of the player's primary clan.
	 */
	primaryclanid: z
		.string()
		.regex(/^[0-9]{17}$/)
		.optional()
		.describe("The 64-bit ID of the player's primary clan."),
	/**
	 * @format unix-timestamp
	 * @description The time the player's Steam account was created.
	 */
	timecreated: z
		.number()
		.optional()
		.describe("The time the player's Steam account was created."),
	/**
	 * @minLength 1
	 * @description The player's real name.
	 */
	realname: z.string().min(1).optional().describe("The player's real name."),
	/**
	 * @minLength 2
	 * @maxLength 2
	 * @description The player's country code.
	 */
	loccountrycode: z
		.string()
		.min(2)
		.max(2)
		.optional()
		.describe("The player's country code."),
	/**
	 * @minLength 2
	 * @maxLength 2
	 * @description The player's state code.
	 */
	locstatecode: z
		.string()
		.min(2)
		.max(2)
		.optional()
		.describe("The player's state code."),
	/**
	 * @description The player's city ID.
	 */
	loccityid: z.number().optional().describe("The player's city ID."),
});

/*** The full response from the ISteamUser/GetPlayerSummaries/v2 endpoint.
 * @see https://partner.steamgames.com/doc/webapi/ISteamUser#GetPlayerSummaries
 * @description Response containing player summary information.
 */
export const getPlayerSummariesResponseSchema = z.object({
	response: z.object({
		players: z.array(playerSummarySchema),
	}),
});

/*** Parameters for the ISteamUser/CheckAppOwnership/v4 endpoint.
 * @see https://partner.steamgames.com/doc/webapi/ISteamUser#CheckAppOwnership
 * @description Parameters for checking app ownership.
 */
export const checkAppOwnershipRequestSchema = z.object({
	key: z.string(),
	/**
	 * @pattern ^[0-9]{17}$
	 * @description The 64-bit SteamID of the user.
	 */
	steamid: z
		.string()
		.regex(/^[0-9]{17}$/)
		.describe("The 64-bit SteamID of the user."),
	/**
	 * @minimum 1
	 * @description The AppID of the game.
	 */
	appid: z.number().min(1).describe("The AppID of the game."),
});

/*** The response from the ISteamUser/CheckAppOwnership/v4 endpoint.
 * @see https://partner.steamgames.com/doc/webapi/ISteamUser#CheckAppOwnership
 * @description Response indicating app ownership.
 */
export const checkAppOwnershipResponseSchema = z.object({
	appownership: z.object({
		/**
		 * @description True if the user owns the app, false otherwise.
		 */
		ownsApp: z
			.boolean()
			.describe("True if the user owns the app, false otherwise."),
		/**
		 * @format unix-timestamp
		 * @description The time the app was acquired by the user.
		 */
		timeAcquired: z
			.number()
			.describe("The time the app was acquired by the user."),
		/**
		 * @pattern ^[0-9]{17}$
		 * @description The 64-bit SteamID of the true owner (if family shared).
		 */
		ownerSteamID: z
			.string()
			.regex(/^[0-9]{17}$/)
			.describe("The 64-bit SteamID of the true owner (if family shared)."),
		/**
		 * @description True if the app is accessed via site license (PC Cafe program).
		 */
		sitelicense: z
			.boolean()
			.optional()
			.describe(
				"True if the app is accessed via site license (PC Cafe program)."
			),
	}),
});

/*** Parameters for the ISteamUser/GetDeletedSteamIDs/v1 endpoint.
 * @see https://partner.steamgames.com/doc/webapi/ISteamUser#GetDeletedSteamIDs
 * @description Parameters for retrieving deleted SteamIDs.
 */
export const getDeletedSteamIDsRequestSchema = z.object({
	key: z.string(),
	/**
	 * @pattern ^[0-9]+$
	 * @description An unsigned 64-bit value for pagination.
	 */
	rowversion: z
		.string()
		.regex(/^[0-9]+$/)
		.describe("An unsigned 64-bit value for pagination."),
});

/*** Represents a deleted Steam ID.
 * @description Information about a deleted SteamID.
 */
export const deletedSteamIDSchema = z.object({
	/**
	 * @pattern ^[0-9]{17}$
	 * @description The 64-bit SteamID of the deleted account.
	 */
	steamid: z
		.string()
		.regex(/^[0-9]{17}$/)
		.describe("The 64-bit SteamID of the deleted account."),
});

/*** The response from the ISteamUser/GetDeletedSteamIDs/v1 endpoint.
 * @see https://partner.steamgames.com/doc/webapi/ISteamUser#GetDeletedSteamIDs
 * @description Response containing a list of deleted SteamIDs.
 */
export const getDeletedSteamIDsResponseSchema = z.object({
	response: z.object({
		deletedids: z.array(deletedSteamIDSchema),
		/**
		 * @pattern ^[0-9]+$
		 * @description The rowversion for the next request.
		 */
		rowversion: z
			.string()
			.regex(/^[0-9]+$/)
			.describe("The rowversion for the next request."),
	}),
});

/*** Parameters for the ISteamUser/GetUserGroupList/v1 endpoint.
 * @see https://partner.steamgames.com/doc/webapi/ISteamUser#GetUserGroupList
 * @description Parameters for retrieving a user's group list.
 */
export const getUserGroupListRequestSchema = z.object({
	key: z.string(),
	/**
	 * @pattern ^[0-9]{17}$
	 * @description The 64-bit SteamID of the user.
	 */
	steamid: z
		.string()
		.regex(/^[0-9]{17}$/)
		.describe("The 64-bit SteamID of the user."),
});

/*** Represents a user group.
 * @description Information about a Steam user group.
 */
export const userGroupSchema = z.object({
	/**
	 * @pattern ^[0-9]+$
	 * @description The 64-bit ID of the group.
	 */
	gid: z
		.string()
		.regex(/^[0-9]+$/)
		.describe("The 64-bit ID of the group."),
});

/*** The response from the ISteamUser/GetUserGroupList/v1 endpoint.
 * @see https://partner.steamgames.com/doc/webapi/ISteamUser#GetUserGroupList
 * @description Response containing a user's group list.
 */
export const getUserGroupListResponseSchema = z.object({
	response: z.object({
		/**
		 * @description True if the request was successful.
		 */
		success: z.boolean().describe("True if the request was successful."),
		groups: z.array(userGroupSchema),
	}),
});

/*** Parameters for the ISteamUser/ResolveVanityURL/v1 endpoint.
 * @see https://partner.steamgames.com/doc/webapi/ISteamUser#ResolveVanityURL
 * @description Parameters for resolving a vanity URL to a SteamID.
 */
export const resolveVanityURLRequestSchema = z.object({
	key: z.string(),
	/**
	 * @minLength 1
	 * @description The vanity URL to resolve.
	 */
	vanityurl: z.string().min(1).describe("The vanity URL to resolve."),
	/**
	 * @minimum 1
	 * @maximum 3
	 * @description The type of vanity URL (1 = individual, 2 = group, 3 = game group).
	 */
	url_type: z
		.number()
		.min(1)
		.max(3)
		.optional()
		.describe(
			"The type of vanity URL (1 = individual, 2 = group, 3 = game group)."
		),
});

/*** The response from the ISteamUser/ResolveVanityURL/v1 endpoint.
 * @see https://partner.steamgames.com/doc/webapi/ISteamUser#ResolveVanityURL
 * @description Response containing the resolved SteamID from a vanity URL.
 */
export const resolveVanityURLResponseSchema = z.object({
	response: z.object({
		/**
		 * @pattern ^[0-9]{17}$
		 * @description The 64-bit SteamID if resolved successfully.
		 */
		steamid: z
			.string()
			.regex(/^[0-9]{17}$/)
			.optional()
			.describe("The 64-bit SteamID if resolved successfully."),
		/**
		 * @minimum 1
		 * @description The success status (1 = success, 42 = no match).
		 */
		success: z
			.number()
			.min(1)
			.describe("The success status (1 = success, 42 = no match)."),
		/**
		 * @description A message describing the status.
		 */
		message: z.string().optional().describe("A message describing the status."),
	}),
});

/*** Parameters for the ISteamUser/GetFriendList/v1 endpoint.
 * @see https://partner.steamgames.com/doc/webapi/ISteamUser#GetFriendList
 * @description Parameters for retrieving a user's friend list.
 */
export const getFriendListRequestSchema = z.object({
	key: z.string(),
	/**
	 * @pattern ^[0-9]{17}$
	 * @description The 64-bit SteamID of the user.
	 */
	steamid: z
		.string()
		.regex(/^[0-9]{17}$/)
		.describe("The 64-bit SteamID of the user."),
	/**
	 * @pattern ^(all|friend)$
	 * @description Filter by relationship type (all or friend).
	 */
	relationship: z
		.string()
		.regex(/^(all|friend)$/)
		.optional()
		.describe("Filter by relationship type (all or friend)."),
});

/*** Represents a friend in the friend list.
 * @description Information about a friend.
 */
export const friendSchema = z.object({
	/**
	 * @pattern ^[0-9]{17}$
	 * @description The 64-bit SteamID of the friend.
	 */
	steamid: z
		.string()
		.regex(/^[0-9]{17}$/)
		.describe("The 64-bit SteamID of the friend."),
	/**
	 * @pattern ^(friend)$
	 * @description The relationship type (always 'friend').
	 */
	relationship: z
		.string()
		.regex(/^(friend)$/)
		.describe("The relationship type (always 'friend')."),
	/**
	 * @format unix-timestamp
	 * @description The Unix timestamp of when the friendship was created.
	 */
	friend_since: z
		.number()
		.describe("The Unix timestamp of when the friendship was created."),
});

/*** The response from the ISteamUser/GetFriendList/v1 endpoint.
 * @see https://partner.steamgames.com/doc/webapi/ISteamUser#GetFriendList
 * @description Response containing a user's friend list.
 */
export const getFriendListResponseSchema = z.object({
	friendslist: z.object({
		friends: z.array(friendSchema),
	}),
});

/*** Parameters for the ISteamUser/GetPlayerBans/v1 endpoint.
 * @see https://partner.steamgames.com/doc/webapi/ISteamUser#GetPlayerBans
 * @description Parameters for retrieving player ban information.
 */
export const getPlayerBansRequestSchema = z.object({
	key: z.string(),
	/**
	 * @pattern ^[0-9,]+$
	 * @description Comma-separated list of 64-bit SteamIDs.
	 */
	steamids: z
		.string()
		.regex(/^[0-9,]+$/)
		.describe("Comma-separated list of 64-bit SteamIDs."),
});

/*** Represents player ban information.
 * @description Details about a player's ban status.
 */
export const playerBanSchema = z.object({
	/**
	 * @pattern ^[0-9]{17}$
	 * @description The player's 64-bit SteamID.
	 */
	SteamId: z
		.string()
		.regex(/^[0-9]{17}$/)
		.describe("The player's 64-bit SteamID."),
	/**
	 * @description True if the player is banned from the Steam Community.
	 */
	CommunityBanned: z
		.boolean()
		.describe("True if the player is banned from the Steam Community."),
	/**
	 * @description True if the player has VAC bans on record.
	 */
	VACBanned: z.boolean().describe("True if the player has VAC bans on record."),
	/**
	 * @minimum 0
	 * @description The number of VAC bans the player has.
	 */
	NumberOfVACBans: z
		.number()
		.min(0)
		.describe("The number of VAC bans the player has."),
	/**
	 * @minimum 0
	 * @description The number of days since the player's last ban.
	 */
	DaysSinceLastBan: z
		.number()
		.min(0)
		.describe("The number of days since the player's last ban."),
	/**
	 * @pattern ^(none|probation|banned)$
	 * @description The player's economy ban status.
	 */
	EconomyBan: z
		.string()
		.regex(/^(none|probation|banned)$/)
		.describe("The player's economy ban status."),
});

/*** The response from the ISteamUser/GetPlayerBans/v1 endpoint.
 * @see https://partner.steamgames.com/doc/webapi/ISteamUser#GetPlayerBans
 * @description Response containing player ban information.
 */
export const getPlayerBansResponseSchema = z.object({
	players: z.array(playerBanSchema),
});
